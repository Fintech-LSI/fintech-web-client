pipeline {
    agent any

    environment {
        AWS_REGION      = 'us-east-1'
        IMAGE_NAME      = 'angular-frontend'
        ECR_REGISTRY    = 'public.ecr.aws/z1z0w2y6'
        EKS_CLUSTER_NAME = 'main-cluster'
        NAMESPACE       = 'fintech'
        SONAR_PROJECT_KEY = 'angular-fronted'
        SONAR_SERVER_URL = 'http://3.85.208.127:9000'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('AngularNoSTD') {
                    sh 'npm install'
                }
            }
        }

        /*stage('SonarQube Analysis') {
            steps {
                dir('AngularNoSTD') {
                    script {
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                sonar-scanner \
                                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                    -Dsonar.sources=src \
                                    -Dsonar.host.url=${SONAR_SERVER_URL} \
                                    -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                    -Dsonar.sourceEncoding=UTF-8
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }*/

        stage('Build Angular') {
            steps {
                dir('AngularNoSTD') {
                    script {
                        try {
                            sh 'npm run build --prod'
                        } catch (Exception e) {
                            error "Angular build failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        try {
                            // Login to ECR
                            sh "aws ecr-public get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"

                            def imageLatest = "${ECR_REGISTRY}/${IMAGE_NAME}:latest"

                            sh """
                                docker build -t ${imageLatest} -f AngularNoSTD/Dockerfile AngularNoSTD --no-cache
                                docker push ${imageLatest}
                            """
                        } catch (Exception e) {
                            error "Docker build/push failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        try {
                            // Configure kubectl
                            sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}"

                            // Create namespace if it doesn't exist
                            sh "kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"

                            // Apply K8s configurations
                            sh """
                                kubectl apply -f AngularNoSTD/k8s/configmap.yaml -n ${NAMESPACE}
                                kubectl apply -f AngularNoSTD/k8s/deployment.yaml -n ${NAMESPACE}
                                kubectl apply -f AngularNoSTD/k8s/service.yaml -n ${NAMESPACE}
                                kubectl apply -f AngularNoSTD/k8s/ingress.yaml -n ${NAMESPACE}
                            """

                            // Verify deployment status
                            sh """
                                echo "Checking deployment status..."
                                kubectl get deployment frontend -n ${NAMESPACE}

                                echo "Checking pod status..."
                                kubectl get pods -n ${NAMESPACE} -l app=frontend

                                echo "Checking service status..."
                                kubectl get service angular-frontend -n ${NAMESPACE}

                                echo "Checking ingress status..."
                                kubectl get ingress angular-frontend-ingress -n ${NAMESPACE}
                            """
                        } catch (Exception e) {
                            error "Deployment failed: ${e.message}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Frontend deployed successfully.'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
        always {
            script {
                // Clean up Docker images
                sh "docker rmi ${ECR_REGISTRY}/${IMAGE_NAME}:latest || true"
                cleanWs()
            }
        }
    }
}
